plugins {
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.5'
}

allprojects {
   apply plugin: 'jacoco' //code coverage

   repositories {
       mavenCentral()
       mavenLocal()
       maven { url uri('/tmp/myRepo/') } //For testing locally
   }

}

subprojects {
   apply plugin: 'java'
   apply plugin: 'checkstyle'
   apply plugin: 'eclipse'
   apply plugin: 'idea'
    apply from: '../../../config/common.gradle'

    dependencies {

        testImplementation libs.junit5.api
        testRuntimeOnly libs.junit5.engine

    }

   checkstyle {
        configFile = rootProject.file('../../config/checkstyle.xml')
    }


   test{
        useJUnitPlatform()
        failFast true
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
      afterTest { descr, result ->
        def totalTime = result.endTime - result.startTime
        logger.warn("Test complete ${descr.className} : ${descr.name} TOTAL TIME=${totalTime}")
      }
      testLogging {
        events "failed"
        exceptionFormat "full"
      }
        //testLogging.showStandardStreams = true
      systemProperty "gradle.running", "true"
   }

    jacocoTestReport {
        additionalSourceDirs.from files(sourceSets.main.allSource.srcDirs)
        sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
        classDirectories.from files(sourceSets.main.output)
        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
    }

    jacocoTestReport.dependsOn test
    check.dependsOn jacocoTestReport
}

task codeCoverage(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from  files(subprojects.sourceSets.main.output)
    executionData.from files(subprojects.jacocoTestReport.executionData)
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

//we don't do java plugin on top level on purpose as it is not a java
//project BUT we need build and clean to work inline with the java projects
task build(dependsOn: ':codeCoverage')

task clean {
   description= "Deletes ${buildDir}"
   doLast {
        project.delete "${buildDir}"
   }
}
